Q1-----------------------------------------------------------------
#include <iostream>

using namespace std;

// Abstract base class Shape
class Shape {
public:
    // Pure virtual function to calculate area
    virtual double calculateArea() const = 0;
};

// Concrete derived class Rectangle
class Rectangle : public Shape {
private:
    double width;
    double height;

public:
    Rectangle(double w, double h) : width(w), height(h) {}

    // Implementation of calculateArea for Rectangle
    double calculateArea() const override {
        return width * height;
    }
};

// Concrete derived class Circle
class Circle : public Shape {
private:
    double radius;
    const double PI = 3.14159;

public:
    Circle(double r) : radius(r) {}

    // Implementation of calculateArea for Circle
    double calculateArea() const override {
        return PI * radius * radius;
    }
};

int main() {
    // Creating instances of Rectangle and Circle using pointers to Shape
    Shape* rectangle = new Rectangle(5.0, 3.0);
    Shape* circle = new Circle(4.0);

    // Calculating and printing the areas
    cout << "Area of Rectangle: " << rectangle->calculateArea() << endl;
    cout << "Area of Circle: " << circle->calculateArea() << endl;

    // Don't forget to release memory allocated for objects
    delete rectangle;
    delete circle;

    return 0;
}

Q2-----------------------------------------------------
#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Product {
private:
    int productId;
    string productName;
    double price;

public:
    Product(int id, const string& name, double cost) : productId(id), productName(name), price(cost) {}

    void displayProductDetails() const {
        cout << "Product ID: " << productId << ", Name: " << productName << ", Price: $" << price << endl;
    }

    double getPrice() const {
        return price;
    }
};

class ShoppingCart {
private:
    vector<Product*> cartItems;

public:
    void addProductToCart(Product* product) {
        cartItems.push_back(product);
    }

    void displayCartItems() const {
        cout << "Items in the shopping cart:" << endl;
        for (const auto& item : cartItems) {
            item->displayProductDetails();
        }
    }

    double calculateTotalCost() const {
        double totalCost = 0.0;
        for (const auto& item : cartItems) {
            totalCost += item->getPrice();
        }
        return totalCost;
    }
};

class User {
private:
    int userId;
    ShoppingCart* userCart;

public:
    User(int id) : userId(id), userCart(nullptr) {}

    void associateShoppingCart(ShoppingCart* cart) {
        userCart = cart;
    }

    void displayUserDetails() const {
        cout << "User ID: " << userId << endl;
        if (userCart) {
            cout << "User has a shopping cart associated." << endl;
        } else {
            cout << "User does not have a shopping cart associated." << endl;
        }
    }

    void addProductToUserCart(Product* product) {
        if (userCart) {
            userCart->addProductToCart(product);
        } else {
            cout << "User does not have a shopping cart to add products." << endl;
        }
    }
};

int main() {
    Product* product1 = new Product(1, "Laptop", 999.99);
    Product* product2 = new Product(2, "Headphones", 49.99);

    ShoppingCart* cart = new ShoppingCart();
    cart->addProductToCart(product1);
    cart->addProductToCart(product2);

    User* user1 = new User(101);
    User* user2 = new User(102);
    user1->associateShoppingCart(cart);

    user1->displayUserDetails();
    user2->displayUserDetails();

    user1->addProductToUserCart(new Product(3, "Keyboard", 29.99));

    cart->displayCartItems();
    cout << "Total cost in the cart: $" << cart->calculateTotalCost() << endl;

    delete product1;
    delete product2;
    delete user1->addProductToUserCart(new Product(3, "Keyboard", 29.99));
    delete cart;
    delete user1;
    delete user2;

    return 0;
}

}
