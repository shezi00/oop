Q1-----------------------------------------------------------------
#include <iostream>

using namespace std;

// Abstract base class
class Vehicle {
public:
    // Pure virtual function for movement
    virtual void move() const = 0;
};

// Concrete derived class for a Car
class Car : public Vehicle {
public:
    void move() const override {
        cout << "The car moves on four wheels." << endl;
    }
};

// Concrete derived class for a Bicycle
class Bicycle : public Vehicle {
public:
    void move() const override {
        cout << "The bicycle moves using pedals." << endl;
    }
};

// Concrete derived class for an Airplane
class Airplane : public Vehicle {
public:
    void move() const override {
        cout << "The airplane flies in the sky." << endl;
    }
};

int main() {
    // Using the classes
    Car car;
    Bicycle bicycle;
    Airplane airplane;

    car.move();
    bicycle.move();
    airplane.move();

    return 0;
}
Q2-----------------------------------------------------
#include <iostream>
#include <string>

using namespace std;

class Product {
private:
    int productId;
    string productName;
    double price;

public:
    Product(int id, const string& name, double p) : productId(id), productName(name), price(p) {}

    void displayDetails() {
        cout << "Product ID: " << productId << "\n";
        cout << "Product Name: " << productName << "\n";
        cout << "Price: $" << price << "\n";
    }

    double getPrice() const {
        return price;
    }
};

class ShoppingCart {
private:
    Product** cart;
    int itemCount;
    int capacity;

public:
    ShoppingCart(int cap) : itemCount(0), capacity(cap) {
        cart = new Product*[capacity];
    }

    ~ShoppingCart() {
        for (int i = 0; i < itemCount; ++i) {
            delete cart[i];
        }
        delete[] cart;
    }

    void addToCart(Product* product) {
        if (itemCount < capacity) {
            cart[itemCount++] = product;
        } else {
            cout << "Cart is full.\n";
        }
    }

    void displayCart() {
        cout << "Shopping Cart:\n";
        for (int i = 0; i < itemCount; ++i) {
            cart[i]->displayDetails();
            cout << "------------------------\n";
        }
    }

    double calculateTotal() {
        double total = 0.0;
        for (int i = 0; i < itemCount; ++i) {
            total += cart[i]->getPrice();
        }
        return total;
    }
};

class User {
private:
    int userId;
    ShoppingCart* userCart;

public:
    User(int id) : userId(id), userCart(nullptr) {}

    void setCart(ShoppingCart* cart) {
        userCart = cart;
    }

    void displayUserDetails() {
        cout << "User ID: " << userId << "\n";
        if (userCart != nullptr) {
            cout << "User has a shopping cart.\n";
        } else {
            cout << "User does not have a shopping cart.\n";
        }
    }
};

int main() {
    Product prod1(1, "Item 1", 10.99);
    Product prod2(2, "Item 2", 5.49);

    ShoppingCart cart(5); // Capacity of 5 items

    cart.addToCart(&prod1);
    cart.addToCart(&prod2);

    cart.displayCart();
    cout << "Total Cost: $" << cart.calculateTotal() << "\n";

    User user1(1001);
    user1.setCart(&cart);

    user1.displayUserDetails();

    return 0;
}
